override.effect.invalid=%s in %s cannot override %s in %s; a method override may only be a Super Effect if it overrides a method with Super Effect.
constructor.call.invalid=Calling a constructor with %s effect from a context limited to %s effects.
call.invalid.effect=Calling a method with %s effect from a context limited to %s effects.
cast.invalid=Casting an expression with %s effect in a context limited to %s effects.
cast.redundant=Cast is redundant.

operation.invalid=This code has effect %s in a context limited to effect %s

subeffect.invalid.methodbody=The effect %s of this method body is not a subeffect of the annotated effect %s.

undefined.iteration=Repetition of effect %s is invalid (undefined)
undefined.iteration.twopart=Repetition of effects %s and %s in that order is invalid (undefined): check that this loop behavior is correct
undefined.sequencing=Sequencing of effect %s followed by %s is invalid (undefined)
undefined.join=Merging branches with effects %s and %s is invalid (undefined): they are incompatible
undefined.residual=At this program point, the method has executed behavior with effect %s, and it is impossible for further execution to be compatible with assumed method effect %s
undefined.join.unaryif=Invalid conditional: This conditional has only a then branch, so its effect (%s) must be compatible with the "do-nothing" effect (%s) in case the branch does not execute. But the effects are incompatible.
undefined.join.assertion=Assertion effects must be greater than the unit effect because they may or may not execute, but this assertion has effect %s
undefined.repetition.twopart=Repetition with body effect %s and conditional effect %s is not valid
undefined.repetition.threepart=Repetition with body effect %s, loop update effect %s, and conditional effect %s is not valid

invalid.return=The effect along this return path is %s, which is not less than the declared behavioral bound %s.
duplicate.annotation.thrown=This method is marked with an annotation that executions throwing %s have behavior %s before the throw, but an existing annotation for this exception already exists (for behavior %s).

undefined.finally.basic=Running this finally block after one or more of the exception paths results in invalid effect sequences.
